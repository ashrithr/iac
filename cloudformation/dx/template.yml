AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a Data Exchange pipeline, which performs a full load of the data from
  subscribed dataset, and performs incremental loads based on updated revisions
  of the dataset.
Parameters:
  DxDataSetId:
    AllowedPattern: ^[a-zA-Z0-9]*$
    ConstraintDescription: Malformed DataSet Id.
    Description: Entitled Dataset Id for which the consumption pipeline has to be setup.
    Type: String
  ConsumptionType:
    AllowedValues:
      - FULL_LOAD
      - INCREMENTAL
    Description: >-
      Type of the consumption pipeline to setup, FULL_LOAD will perform one-time
      load, where as  INCREMENTAL will perform one-time load and setup a
      monitoring pipeline which will incrementally load data revisions as they
      are published.
    Type: String
    Default: INCREMENTAL
  S3BucketName:
    Type: String
    Description: Bucket used to publish the data to.
  S3CodeBucketName:
    Type: String
    Description: Bucket where Lambda zip files are hosted.

Resources:
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - dataexchange:GetDataSet
                  - dataexchange:ListDataSet
                  - dataexchange:GetRevision
                  - dataexchange:ListDataSetRevisions
                  - dataexchange:ListRevisionAssets
                  - dataexchange:CreateJob
                  - dataexchange:GetJob
                  - dataexchange:StartJob
                  - dataexchange:CancelJob
                  - dataexchange:ListJob
                  - dataexchange:TagResource
                  - dataexchange:ListTagsForResource
                  - dataexchange:GetAsset
                Resource:
                  - !Sub arn:aws:dataexchange:${AWS::Region}:${AWS::AccountId}:data-sets/${DxDataSetId}*
                  - !Sub arn:aws:dataexchange:${AWS::Region}:${AWS::AccountId}:jobs/*

  ExportDataSetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Exports specified dataset latest revision to S3 bucket.
      Handler: index.handler
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: Python3.7
      MemorySize: 128
      Timeout: 30
      Code:
        S3Bucket: !Ref S3CodeBucketName
        S3Key: export_dataset.zip

  MonitorExportJob:
    Type: AWS::Lambda::Function
    Properties:
      Description: Monitors the status of an Export Job.
      Handler: index.handler
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: Python3.7
      MemorySize: 128
      Timeout: 30
      Code:
        S3Bucket: !Ref S3CodeBucketName
        S3Key: monitor_export.zip

  StateMachineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "State machine to export data from subscribed data-exchange entitled data-set",
            "StartAt": "Export DataSet",
            "States": {
              "Export DataSet": {
                "Type": "Task",
                "Resource": "${export_dataset_lambda_arn}",
                "Next": "Wait 1 Minute"
                "Parameters": {
                  "Payload": {
                    "dataset_id": "${dataset_id}",
                    "bucket_name": "${bucket_name}"
                  }
                }
              },
              "Wait 1 Minute": {
                "Type": "Wait",
                "Seconds": 60,
                "Next": "Get Export Status"
              },
              "Get Export Status": {
                "Type": "Task",
                "Resource": "${monitor_export_lambda_arn}",
                "Next": "Export Complete?"
              },
              "Export Complete?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.ExportJob.Status",
                    "StringEquals": "available",
                    "Next": "Done"
                  },
                  {
                    "Variable": "$.ExportJob.Status",
                    "StringEquals": "failed",
                    "Next": "Failed"
                  },
                ],
                "Default": "Wait 1 Minute"
              },
              "Done": {
                  "Type": "Pass",
                  "End": true
              },
              "Failed": {
                  "Type": "Pass",
                  "End": true
              }
            }
          }
        - export_dataset_lambda_arn: !GetAtt [ExportDataSetLambda, Arn]
          monitor_export_lambda_arn: !GetAtt [MonitorExportJob, Arn]
          dataset_id: !Ref DxDataSetId
          bucket_name: !Ref S3BucketName
      RoleArn: !GetAtt [StateMachineIamRole, Arn]

  DxEventNotification:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors entitled dataset for new revisions published
      EventPattern:
        source:
          - aws.dataexchange
        detail-type:
          - Revision Published To Data Set
        resources:
          - !Ref DxDataSetId
      State: ENABLED
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          Id: "StateMachineV1"
          RoleArn: !GetAtt EventsIamRole.Arn

  EventsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EventsStatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  !Join [
                    "",
                    [
                      "arn:aws:states:",
                      !Ref "AWS::Region",
                      ":",
                      !Ref "AWS::AccountId",
                      ":",
                      "stateMachine:",
                      !GetAtt StateMachine.Arn,
                    ],
                  ]

Outputs:
  # TODO:
