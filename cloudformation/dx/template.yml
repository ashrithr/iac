AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a Data Exchange pipeline, which performs a full load of the data from
  subscribed dataset, and performs incremental loads based on updated revisions
  of the dataset.
Parameters:
  DxDataSetId:
    AllowedPattern: ^[a-zA-Z0-9]*$
    ConstraintDescription: Malformed DataSet Id.
    Description: Entitled Dataset Id for which the consumption pipeline has to be setup.
    Type: String
  ConsumptionType:
    AllowedValues:
      - FULL
      - INCREMENTAL
    Description: >-
      Type of the consumption pipeline to setup, FULL will perform one-time
      load and setup event notifications for getting future revisions of data,
      where as INCREMENTAL will only setup a monitoring pipeline which will
      incrementally load data revisions as they are published.
    Type: String
    Default: INCREMENTAL
  RevisionsCount:
    Description: >-
      Number of previous revisions to load as part of the FULL consumption type.
    MaxValue: 25
    MinValue: 1
    Default: 1
    Type: Number
  S3BucketName:
    Type: String
    Description: Bucket used to publish the data to.
  SnsTopicName:
    Type: String
    Description: >-
      Name of the SNS Topic that used to send notifications in case of a state
      machine failure.
  RetryExecutionCount:
    Type: Number
    Description: >-
      Number of times the whole workflow has to be retried for each revision.
    Default: 2
    MaxValue: 5
    MinValue: 1

Conditions:
  IsIncrementalLoad: !Equals [!Ref ConsumptionType, INCREMENTAL]
  IsFullLoad: !Equals [!Ref ConsumptionType, FULL]

Resources:
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
        - PolicyName: DataExchangeAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dataexchange:GetDataSet
                  - dataexchange:ListDataSet
                  - dataexchange:GetRevision
                  - dataexchange:ListDataSetRevisions
                  - dataexchange:ListRevisionAssets
                  - dataexchange:TagResource
                  - dataexchange:ListTagsForResource
                  - dataexchange:GetAsset
                Resource:
                  - !Sub
                    - arn:aws:dataexchange:${AWS::Region}:${AWS::AccountId}:data-sets/${DxDataSetId}
                    - { DxDataSetId: !Ref DxDataSetId }
                  - !Sub
                    - arn:aws:dataexchange:${AWS::Region}:${AWS::AccountId}:data-sets/${DxDataSetId}/*
                    - { DxDataSetId: !Ref DxDataSetId }
              - Effect: Allow
                Action:
                  - dataexchange:CreateJob
                  - dataexchange:GetJob
                  - dataexchange:StartJob
                  - dataexchange:CancelJob
                  - dataexchange:ListJob
                Resource: "*"
                Condition:
                  StringEqualsIgnoreCase:
                    "dataexchange:JobType": EXPORT_ASSETS_TO_S3
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - "*"
                Condition:
                  StringEqualsIgnoreCase:
                    "s3:ExistingObjectTag/aws-data-exchange": "true"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - arn:aws:s3:::*aws-data-exchange*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - arn:aws:s3:::*aws-data-exchange*
                  - !Sub
                    - arn:aws:s3:::${S3BucketName}/*
                    - { S3BucketName: !Ref S3BucketName }
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                Resource:
                  - "*"
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: "*"

  ExportDataSetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Exports specified dataset latest revision to S3 bucket.
      Handler: export_dataset.handler
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Code: export_dataset/

  MonitorExportJob:
    Type: AWS::Lambda::Function
    Properties:
      Description: Monitors the status of an Export Job.
      Handler: monitor_export.handler
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Code: monitor_export/

  RetryStep:
    Type: AWS::Lambda::Function
    Properties:
      Description: Retries the state machine workflow based on specified number of times.
      Handler: retry.handler
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Code: retry_step/

  StateMachineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ExportDataSetLambda.Arn
                  - !GetAtt MonitorExportJob.Arn
                  - !GetAtt RetryStep.Arn
        - PolicyName: SnsPublishPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SnsTopicName}"

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineIamRole.Arn
      DefinitionString:
        Fn::Sub: |-
          {
            "Comment": "State machine to export data from subscribed data-exchange entitled data-set",
            "StartAt": "Export DataSet",
            "Version": "1.0",
            "States": {
              "Export DataSet": {
                "Type": "Task",
                "Resource": "${ExportDataSetLambda.Arn}",
                "Next": "Wait 1 Minute",
                "Retry": [{
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 2,
                  "BackoffRate": 5
                }],
                "ResultPath": "$.ExportDatasetResult"
              },
              "Wait 1 Minute": {
                "Type": "Wait",
                "Seconds": 60,
                "Next": "Get Export Status"
              },
              "Get Export Status": {
                "Type": "Task",
                "Resource": "${MonitorExportJob.Arn}",
                "Next": "Export Complete?",
                "Retry": [{
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 5,
                  "BackoffRate": 2
                }],
                "ResultPath": "$.GetExportStatusResult"
              },
              "Export Complete?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.GetExportStatusResult.ExportJob.State",
                    "StringEquals": "COMPLETED",
                    "Next": "Done"
                  },
                  {
                    "Variable": "$.GetExportStatusResult.ExportJob.State",
                    "StringEquals": "ERROR",
                    "Next": "Should Restart"
                  }
                ],
                "Default": "Wait 1 Minute"
              },
              "Should Restart": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.retry_execution_count",
                    "NumericGreaterThan": 0,
                    "Next": "Notify Retry"
                  }
                ],
                "Default": "Done"
              },
              "Notify Retry": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": "Load from latest revision failed for dataset-id: ${DxDataSetId}. Retrying...",
                  "TopicArn": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SnsTopicName}"
                },
                "Next": "Restart",
                "ResultPath": "$.NotifyRetryResult"
              },
              "Restart": {
                "Type": "Task",
                "Resource": "${RetryStep.Arn}",
                "Next": "Done",
                "ResultPath": null
              },
              "Done": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Message": "Load from latest revision succeeded for dataset-id: ${DxDataSetId}",
                    "TopicArn": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SnsTopicName}"
                  },
                  "End": true
              }
            }
          }

  DxEventNotification:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors entitled dataset for new revisions published
      EventPattern:
        source:
          - aws.dataexchange
        detail-type:
          - Revision Published To Data Set
        resources:
          - !Ref DxDataSetId
      State: ENABLED
      Targets:
        - Arn: !Ref StateMachine
          Id: "StateMachineV1"
          RoleArn: !GetAtt EventsIamRole.Arn
          Input:
            Fn::Sub: |-
              {
                "state_machine_arn": "${StateMachine}",
                "retry_execution_count": ${RetryExecutionCount},
                "dataset_id": "${DxDataSetId}",
                "bucket_name": "${S3BucketName}",
                "prefix": "dx"
              }

  EventsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EventsStatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref StateMachine

  ExecuteStateMachineLambda:
    Type: AWS::Lambda::Function
    Condition: IsFullLoad
    Properties:
      Handler: execute_sf.handler
      Role: !GetAtt LambdaIamRole.Arn
      Code: execute_sf/
      Runtime: python3.7
      Description: Executes a specified State Machine.
      MemorySize: 128
      Timeout: 10

  ExecuteStateMachine:
    Type: Custom::ExecuteStateMachineLambda
    Condition: IsFullLoad
    Properties:
      ServiceToken: !GetAtt ExecuteStateMachineLambda.Arn
      SF_ARN: !Ref StateMachine
      REVISIONS_COUNT: !Ref RevisionsCount
      SF_INPUT:
        Fn::Sub: |-
          {
            "state_machine_arn": "${StateMachine}",
            "retry_execution_count": ${RetryExecutionCount},
            "dataset_id": "${DxDataSetId}",
            "bucket_name": "${S3BucketName}",
            "prefix": "dx"
          }

Outputs:
  ExportedDataSetId:
    Value: !Ref DxDataSetId
  StateMachineArn:
    Value: !Ref StateMachine
